define("matta", ["d3"], function(d3) {
    var matta = {};
    
    // sets style attr only if the property exists in every object in the selection.
    matta.styler = function(attr, property) {
        return function(sel) {
            sel.each(function(d) {
                if (d.hasOwnProperty(property)) {
                    d3.select(this).style(attr, d[property]);
                }
            });
        };
    };
    
    matta.labeler = function() {
        return function(sel) {
            sel.each(function(d) {
                if (d.hasOwnProperty('label')) {
                    d3.select(this).text(d.label);
                } else if (d.hasOwnProperty('name')) {
                    d3.select(this).text(d.name);
                } else if (d.hasOwnProperty('id')) {
                    d3.select(this).text(d.id);
                }
            });
        };
    };
    
    matta.prepare_graph = function (graph) {
        var node_map = d3.map();

        graph.nodes.forEach(function(d) {
            node_map.set(d.id, d);
        });
        
        graph.nodes.forEach(function(d) {
            if (d.parent != null) {
                d.parent = node_map.get(d.parent);
            }
        });

        graph.links.forEach(function(d) {
            d.source = graph.nodes[d.source];
            d.target = graph.nodes[d.target];
        });

    // graph attributes
        graph.graph.forEach(function(d) {
            graph[d[0]] = d[1];
        });

        console.log('prepared graph', graph);
    };
    
    // from Mike Bostock
    matta.fit_projection = function(width, height, bounding_box) {
        var s = .95 / Math.max((b[1][0] - b[0][0]) / width, (b[1][1] - b[0][1]) / height);
        var t = [(width - s * (b[1][0] + b[0][0])) / 2, (height - s * (b[1][1] + b[0][1])) / 2];
        return [s, t];
    };
    
    return matta;
});